// fyne widget - label, entry and button
package main

/*
**
 */
import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"

	//"fyne.io/fyne/v2/canvas"

	//"fyne.io/fyne/v2/theme"

	//"image/color"

	//"bytes"
	//"encoding/gob"
	//"errors"

	"fmt"
	"os"
	"path/filepath"
	"strings"

	// "golang.design/x/clipboard"

	"github.com/blevesearch/bleve/v2"

	//"github.com/davecgh/go-spew/spew"
	"github.com/test/internal/state"
)

//
// pod state
//

func Pod_search(path string) string {
	// load the file
	pod := state.Empty_pod()
	pod.Unserialise(path)

	// grab the searchable stuff and return it
	raw := []string{pod.Metadata.About.Title,
		pod.Metadata.About.Description,
		pod.Metadata.Search_data.Maintag}
	raw = append(raw, pod.Metadata.Search_data.Tags...)
	data := strings.Join(raw, " ")
	return data
}

// state
func Get_search_strings(personality string) strings_func {
	var str strings_func
	switch personality {
	case "POD":
		str = Pod_search
	}
	return str
}

type strings_func func(string) string

// search
func build_dex(path string, personality string) bleve.Index {
	var str strings_func
	var bleveIdx bleve.Index
	var err error

	idx_path := path + "/index.bleve"
	err = os.RemoveAll(idx_path)
	if err != nil {
		panic(err)
	}
	mapping := bleve.NewIndexMapping()
	bleveIdx, err = bleve.New(idx_path, mapping)
	if err != nil {
		panic(err)
	}

	str = Get_search_strings(personality)
	err = filepath.Walk(path,
		func(path string, info os.FileInfo, ret error) error {
			if ret != nil {
				return ret
			}
			ext := filepath.Ext(path)
			if ext == ".json" {
				data := str(path)
				bleveIdx.Index(path, data)
			}
			return nil
		},
	)
	if err != nil {
		panic(err)
	}
	return bleveIdx

}

// test harness
var root_path string = "/home/paulc/tshirts"

func main() {
	// idx := build_dex(root_path, "POD")
	/*
		idx_path := root_path + "/index.bleve"
		idx, _ := bleve.Open(idx_path)
		query := bleve.NewMatchQuery("illuminated")
		searchRequest := bleve.NewSearchRequest(query)
		searchRequest.Fields = []string{"*"} // include the text indexed in the results

		searchResult, _ := idx.Search(searchRequest)
		data := []string{}

		for _, result := range searchResult.Hits {
			 returns the original search text in value
			for key, value := range result.Fields {
				fmt.Println(key, ":", value)
			}

			data = append(data, result.ID)

			//fmt.Println(result.ID) // returns the id which is the path of the file
		}
		//fmt.Printf("here %+v\n", searchResult)
	*/
	myApp := app.New()
	w := myApp.NewWindow("Lines")
	content := NewRadioBox(root_path, func(value string) {
		fmt.Println(value)

	})

	w.SetContent(content)

	w.Resize(fyne.NewSize(1000, 1000))
	w.ShowAndRun()

}
